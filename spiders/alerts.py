from re import T
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import json
import scraper
import time
import util

SCOREBOARD_PREFIX = "https://www.espn.com/nba/scoreboard/_/date/"
MATCHUP_PREFIX = "https://www.espn.com/nba/matchup?gameId="
RECORDS_JSON = "jsons/records.json"

# Up to 2022-01-30
# GAME_IDS = ['401358773', '401358774', '401359833', '401359834', '401358775', '401359835', '401359836', '401359837', '401359838', '401359839', '401359840', '401358776', '401359841', '401358777', '401359842', '401358778', '401359843', '401359844', '401359845', '401358779', '401359846', '401359847', '401359848', '401359849', '401358780', '401359850', '401359851', '401359852', '401359853', '401359854', '401359855', '401359856', '401359857', '401359858', '401359859', '401359860', '401359861', '401359862', '401359863', '401359864', '401359865', '401359866', '401359867', '401359868', '401359869', '401359870', '401359871', '401359872', '401359873', '401359874', '401359875', '401359876', '401359877', '401359878', '401359879', '401359880', '401359881', '401359882', '401359883', '401359884', '401359885', '401359886', '401359887', '401359888', '401359889', '401359890', '401359891', '401359892', '401359893', '401359894', '401359895', '401359896', '401359897', '401359898', '401359899', '401359900', '401359901', '401359902', '401359903', '401359904', '401359905', '401359906', '401359907', '401359908', '401359909', '401359910', '401359911', '401359912', '401359913', '401359914', '401359915', '401359916', '401359917', '401359918', '401359919', '401359920', '401359921', '401359922', '401359923', '401359924', '401359925', '401359926', '401359927', '401359928', '401359929', '401359930', '401359931', '401359932', '401359933', '401359934', '401359935', '401359936', '401359937', '401359938', '401359939', '401359940', '401359941', '401359942', '401359943', '401359944', '401359945', '401359946', '401359947', '401359948', '401359949', '401359950', '401359951', '401359952', '401359953', '401359954', '401359955', '401359956', '401359957', '401359958', '401359959', '401359960', '401359961', '401359962', '401359963', '401359964', '401359965', '401359966', '401359967', '401359968', '401359969', '401359970', '401359971', '401359972', '401359973', '401359974', '401359975', '401359976', '401359977', '401359978', '401359979', '401359980', '401359981', '401359982', '401359983', '401359984', '401359985', '401359986', '401359987', '401359988', '401359989', '401359990', '401359991', '401359992', '401359993', '401359994', '401359995', '401359996', '401359997', '401359998', '401359999', '401360000', '401360001', '401360002', '401360003', '401360004', '401360005', '401360006', '401360007', '401360008', '401360009', '401360010', '401360011', '401360012', '401360013', '401360014', '401360015', '401360016', '401360017', '401360018', '401360019', '401360020', '401360021', '401360022', '401360023', '401360024', '401360025', '401360026', '401360027', '401360028', '401360029', '401360030', '401360031', '401360032', '401360033', '401360034', '401360035', '401360036', '401360037', '401360038', '401360039', '401360040', '401360041', '401360042', '401360043', '401360044', '401360045', '401360046', '401360047', '401360048', '401360049', '401360050', '401360051', '401360052', '401360053', '401360054', '401360055', '401360056', '401360057', '401360058', '401360059', '401360060', '401360061', '401360062', '401360063', '401360064', '401360065', '401360066', '401360067', '401360068', '401360069', '401360070', '401360071', '401360072', '401360073', '401360074', '401360075', '401360076', '401360077', '401360078', '401360079', '401360080', '401360081', '401360082', '401360083', '401360084', '401360085', '401360086', '401360087', '401360088', '401360089', '401360090', '401360091', '401360092', '401360093', '401360094', '401360095', '401360096', '401360097', '401360098', '401360099', '401360100', '401360101', '401360102', '401360103', '401360104', '401360105', '401360106', '401360107', '401360108', '401360109', '401360110', '401360111', '401360112', '401360113', '401360114', '401360115', '401360116', '401360117', '401360118', '401360119', '401360120', '401360121', '401360122', '401360123', '401360124', '401360125', '401360126', '401360127', '401360128', '401360129', '401360130', '401360131', '401360132', '401360133', '401360134', '401360135', '401360136', '401360137', '401360138', '401360139', '401360140', '401360141', '401360142', '401360143', '401360144', '401360145', '401360146', '401360147', '401360148', '401360149', '401360150', '401360151', '401360152', '401360153', '401360154', '401360155', '401360156', '401360157', '401360158', '401360159', '401360160', '401360161', '401360162', '401360163', '401360164', '401360165', '401360166', '401360167', '401360168', '401360169', '401360170', '401360171', '401360172', '401360173', '401360174', '401360175', '401360176', '401360177', '401360178', '401360179', '401360180', '401360181', '401360182', '401360183', '401360184', '401360185', '401360186', '401360187', '401360188', '401360189', '401360190', '401360191', '401360192', '401360193', '401360194', '401360195', '401360196', '401360197', '401360198', '401360199', '401360200', '401360201', '401360202', '401360203', '401360204', '401360205', '401360206', '401360207', '401360208', '401360209', '401360210', '401360211', '401360212', '401360213', '401360214', '401360215', '401360216', '401360217', '401360218', '401360219', '401360220', '401360221', '401360222', '401360223', '401360224', '401360225', '401360226', '401360227', '401360228', '401360229', '401360230', '401360231', '401360232', '401360233', '401360234', '401360235', '401360236', '401360237', '401360238', '401360240', '401360239', '401360241', '401360242', '401360243', '401360244', '401360245', '401360246', '401360247', '401360248', '401360249', '401360250', '401360251', '401360252', '401360253', '401360255', '401360256', '401360254', '401360257', '401360258', '401360259', '401360262', '401360261', '401360260', '401360263', '401360264', '401360265', '401360269', '401360266', '401360267', '401360268', '401360270', '401360271', '401360273', '401360274', '401360275', '401360272', '401360279', '401360280', '401360278', '401360276', '401360277', '401360281', '401360283', '401360284', '401360285', '401360286', '401360287', '401360282', '401360289', '401360290', '401360291', '401360292', '401360293', '401360288', '401360294', '401360295', '401360297', '401360298', '401360299', '401360296', '401360300', '401360301', '401360302', '401360303', '401360304', '401360305', '401360306', '401360307', '401360308', '401360309', '401360311', '401360310', '401358781', '401358782', '401358783', '401358784', '401358785', '401360312', '401360313', '401360314', '401360315', '401360316', '401360317', '401360318', '401360319', '401360320', '401360321', '401360322', '401360323', '401360324', '401360325', '401360326', '401360327', '401360328', '401360329', '401360330', '401360331', '401360332', '401360333', '401360334', '401360335', '401360336', '401360337', '401360338', '401360339', '401360341', '401360342', '401360343', '401360340', '401360344', '401360345', '401360346', '401360347', '401360348', '401360349', '401360350', '401360351', '401360352', '401360353', '401360354', '401360355', '401360356', '401360357', '401360358', '401360359', '401360360', '401360361', '401360362', '401360363', '401360364', '401360365', '401360366', '401360367', '401360368', '401360369', '401360370', '401360371', '401360372', '401360373', '401360374', '401360375', '401360376', '401360377', '401360378', '401360379', '401360380', '401360381', '401360382', '401360383', '401360384', '401360385', '401360386', '401360387', '401360388', '401360389', '401360390', '401360391', '401360392', '401360393', '401360394', '401360395', '401360396', '401360397', '401360398', '401360399', '401360400', '401360401', '401360402', '401360403', '401360404', '401360405', '401360406', '401360407', '401360408', '401360409', '401360410', '401360411', '401360412', '401360413', '401360414', '401360415', '401360421', '401360416', '401360417', '401360418', '401360419', '401360420', '401360422', '401360423', '401360424', '401360425', '401360426', '401360427', '401360428', '401360429', '401360530', '401360430', '401401133', '401360431', '401360432', '401360433', '401360434', '401401138', '401360435', '401360437', '401360438', '401360439', '401360440', '401360441', '401360442', '401360443', '401360444', '401360445', '401360446', '401360447', '401360448', '401360449', '401360450', '401360451', '401360452', '401360453', '401360454', '401360456', '401360455', '401360457', '401360458', '401360459', '401360460', '401360461', '401360462', '401360463', '401360464', '401360465', '401360466', '401360467', '401360468', '401360469', '401360436', '401360470', '401360471', '401360472', '401360473', '401360474', '401360475', '401360476', '401360477', '401360478', '401360479', '401360480', '401360481', '401360482', '401360483', '401360484', '401360485', '401360486', '401360487', '401360488', '401360489', '401360490', '401360491', '401360492', '401360493', '401360494', '401360495', '401360496', '401360497', '401360498', '401360499', '401360500', '401360501', '401360502', '401360503', '401360504', '401360505', '401360506', '401360507', '401360508', '401360509', '401360510', '401360511', '401360512', '401360513', '401360515', '401360514', '401360516', '401360517', '401360518', '401360519', '401360520', '401360521', '401360522', '401360523', '401360524', '401360525', '401360526', '401360527', '401360528', '401360531', '401360549', '401360532', '401360533', '401360534', '401360535', '401401137', '401360536', '401360537', '401360538', '401360539', '401360540', '401360541', '401360542', '401360543', '401360544', '401360546', '401401134', '401401140', '401360547', '401360550', '401360551', '401360552', '401360553', '401360555', '401360554', '401360556', '401360548', '401360557', '401360558', '401360559', '401360560', '401360561', '401360562', '401360563', '401360564', '401360565', '401360566', '401360567', '401360568', '401360569', '401360572', '401360570', '401360571', '401360573', '401360574', '401360575', '401360576', '401360577']

class Alerts:
    def __init__(self):
        self.Records = self.grab_existing_record_history()

    def grab_existing_record_history(self):
        f = open(RECORDS_JSON)
        try:
            records = json.load(f)
        except:
            records = {}
        f.close()
        return records

    def grab_game_ids(self):
        start_date = datetime(2022, 1, 30)
        end_date = datetime.now() - timedelta(1)

        # start of 2021-2022 NBA season (datetime(2021, 10, 19))
        # end_date = datetime.now()
        # end_date = datetime(2021, 10, 21)
        formatted_dates = util.get_list_of_formatted_dates(start_date, end_date)
        game_ids = []
        for formatted_date in formatted_dates:
            # "https://www.espn.com/nba/scoreboard/_/date/20220128"
            soup = scraper.get_soup("{0}{1}".format(SCOREBOARD_PREFIX, formatted_date))

            # grab game ids and append
            a_tags = soup.findAll('a', {'class':'AnchorLink Button Button--sm Button--anchorLink Button--alt mb4 w-100'})
            for a_tag in a_tags:
                game_id = a_tag['href'].split("/")
                game_id = game_id[len(game_id)-1]
                if game_id not in game_ids:
                    game_ids.append(str(game_id))

        return game_ids

    def update_records(self, url):
        soup = scraper.get_soup(url)
        text = soup.prettify()

        try:
            # grab home/away teams, date
            home = text[text.find("espn.gamepackage.homeTeamName = ")+len("espn.gamepackage.homeTeamName = "):]
            home = home[:home.find(";")].replace('"', '')
            away = text[text.find("espn.gamepackage.awayTeamName = ")+len("espn.gamepackage.awayTeamName = "):]
            away = away[:away.find(";")].replace('"', '')
            date = text[text.find("espn.gamepackage.timestamp = ")+len("espn.gamepackage.timestamp = "):]
            date = date[:date.find(";")].replace('"', '')[:10]
            date = datetime.strptime(date, "%Y-%m-%d") - timedelta(1)
            date = "{0}-{1}-{2}".format(date.year, date.month, date.day)

            # grab lead/deficits for each team
            # reasonable assumption (?): index 0 is ALWAYS away and index 1 is ALWAYS home
            tds = soup.find("tr", {"data-stat-attr" : "largestLead"}).find_all("td")[1:]
            home_lead = int(tds[1].text.strip())
            away_lead = int(tds[0].text.strip())
            records = {
                home:{
                    "game_date": date,
                    "largest_lead": home_lead,
                    "largest_deficit": away_lead,
                    "opp_team": away,
                },
                away:{
                    "game_date": date,
                    "largest_lead": away_lead,
                    "largest_deficit": home_lead,
                    "opp_team": home,
                },
            }

            # update the records with non-duplicates
            for team in records:
                skip = False
                if team in self.Records:
                    for record in self.Records[team]:
                        if record["game_date"] == date:
                            skip = True
                            break
                    if not skip:
                        self.Records[team].append(records[team])
                else:
                    self.Records[team] = [records[team]]
        except Exception as e:
            print("Error with url: {0} with exception {1}".format(url, e))
            pass

    def update_records_json(self):
        f = open(RECORDS_JSON, "w+")
        json_string = json.dumps(self.Records)
        f.write(str(json_string))
        f.close()

def get_records():
    alerts = Alerts()
    game_ids = alerts.grab_game_ids()
    # for k, game_id in enumerate(game_ids):
    #     alerts.update_records("{0}{1}".format(MATCHUP_PREFIX, game_id))
    # alerts.update_records_json()
    return alerts.Records

def get_spreads():
    # Spread, totals, moneylines
    draft_kings_sportsbook_url = "https://sportsbook.draftkings.com/leagues/basketball/88670846"
    soup = scraper.get_soup(draft_kings_sportsbook_url)

def main():
    # records = get_records()
    get_spreads()





main()